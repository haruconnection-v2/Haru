user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
events {
    worker_connections  1024;
}
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main '$remote_addr - $remote_user [$time_local] '
                     '"$request" $status $body_bytes_sent '
                     '"$http_referer" "$http_user_agent"'
                     'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log  /var/log/nginx/access.log  main;
    error_log  /var/log/nginx/error.log  warn;

    sendfile        on;
    keepalive_timeout  65;
    server_tokens off;
    client_max_body_size 20M;

    upstream backend {
        server backend:8080;
    }

    server {
        listen 80;
        server_name localhost;
        location ~* (service-worker\.js)$ {
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            expires off;
            proxy_no_cache 1;
        }
        location /api {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header Access-Control-Allow-Origin "http://localhost:80"; # 허용할 출처 설정
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS"; # 허용할 HTTP 메서드
            add_header Access-Control-Allow-Headers "Content-Type, Authorization"; # 허용할 요청 헤더
            add_header Access-Control-Allow-Credentials "true"; # 쿠키 또는 인증 정보 허용

            proxy_pass http://backend;
        }
        location / {
            root /var/www/frontend;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }
        location /ws {
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
                proxy_pass http://backend;
            }

    }
}